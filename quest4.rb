#viii.[Ruby][Level2] ブロックを使った配列の処理ができる(advanced)

#1. each
#従業員の名前がID順に配列で渡されるので、IDと従業員の名前をセットにして出力する print_names 関数を定義してください。
#なお、each メソッドと with_index メソッドを使うようにしてください。

#自分のコード↓
# def print_names(names)
#     names = ['上田', '田仲', '堀田']
#     names.each_with_index(1) do |name, i|
#     puts"#{i}.#{name}"

# end
# print_names(['上田', '田仲', '堀田'])

#解答
def print_names(names)
    names.each.with_index(1) do |name, i|
        puts "#{i}. #{name}"
    end
end

print_names(['上田', '田仲', '堀田'])

#2. map
#与えられた整数の配列の要素を2乗した配列を返す square 関数を定義してください。
#なお、map メソッドを使うようにしてください。

#勉強不足。map関数の理解が必要。↓解答
def square(numbers)
    numbers.map { |n| n ** 2 }
end
  squared_numbers = square([5, 7, 10])
  print squared_numbers
  
#3. select
#整数の配列から偶数を抽出した配列を返す関数 select_even_numbers を作成してください。
#なお、select メソッドを使うようにしてください。

#参考書のコードを参考。selectを初めて学習。
def select_even_numbers(numbers)
    even_numbers = numbers.select { |n|n.even? }
end
even_numbers = select_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
print even_numbers

#iv.[Ruby][Level2] ハッシュを使うことができる(advanced)
#ハッシュを使うことができる
#1. ハッシュ

#①ハッシュと配列は何が違うのか

#複数の値をまとめて管理する方法として、配列とハッシュがある。
#配列は複数の値を並べて管理するのに対して、ハッシュはそれぞれの値にキーと呼ばれる名前をつけて管理する。
#例：配列・・・順序を持つ要素のコレクション　[値1,値2]　
#例：ハッシュ・・・キーと値のペアのコレクション。　{キー1 => 値1,キー2 => 値2}

#②ハッシュと配列はそれぞれどのような用途に向いているのか

#ハッシュは「キー」に基づいてデータを管理・アクセスするのに向いており、配列は順序や位置に基づいてデータを管理・アクセスするのに向いています。
#ハッシュの用途↓
#一意のキーに関連付けられたデータを保存・取得する際に使用。
#キーを基にデータを検索する際に高速。
#辞書や設定情報、属性値のようなものを表現するのに適している.


#配列の用途↓
#順番に関連したデータを保存・取得する場面で使用。
#インデックス（位置）を基にデータをアクセスする際に便利。
#リストやシーケンスなどの順序付きのデータを表現するのに適している。


#2. 首都
#国名と首都名が組み合わせになったハッシュに対して、"#{国名}の首都は#{首都名}です"と出力する関数 print_capitals を作成してください。


def print_capitals(capitals)
    capitals = { country1 => capital1, country2 => capital2}
    puts "#{capitals["country1"]}の首都は#{capitals["capital1"]}です"
end
print_capitals({ '日本' => '東京', 'アメリカ' => 'ワシントンD.C.' })

#
def print_capitals(capitals)
    # eachメソッドを使用して、ハッシュの各キーと値のペアにアクセス
    capitals.each do |country, capital|
      # 出力のフォーマットを指定して、国名と首都名を表示
      puts "#{country}の首都は#{capital}です"
    end
end
print_capitals({ '日本' => '東京', 'アメリカ' => 'ワシントンD.C.' })

#シンボルを使うことができる
#1. シンボル

#シンボルとは何か
#シンボルはRubyのデータ型の一つで、イミュータブル（変更不可能）なオブジェクトとして定義される
#:symbol_name のようにコロンの後に名前を付けて表現される。

#文字列と何が違うのか
#イミュータブル性: シンボルは変更不可能ですが、文字列は変更可能。
#オブジェクトID: 同じシンボルは常に同じオブジェクトIDを持つ
#新しい文字列を作るたびに異なるオブジェクトIDが割り当てられる。これは、シンボルがメモリ上で一度しか作成されないため。
#パフォーマンス: シンボルの比較はオブジェクトIDの比較となるため、文字列の比較よりも高速です。

#シンボルがよく使われるのはどのような用途か
#1.ハッシュのキー: メモリ効率と高速な比較のため、ハッシュのキーとしてシンボルを使用することが一般的.
#2.定数や識別子: シンボルは一意性が保証されるので、特定の定数や識別子を表すのに適する。
#3.メソッド名の参照: sendやdefine_methodなどのメタプログラミング技法でメソッド名を参照する際にシンボルを使用することが一般的.
#Enumの代わり: Rubyには組み込みのEnumがないが、シンボルを使って独自のEnumのような構造を作ることができる。



